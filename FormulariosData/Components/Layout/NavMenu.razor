@using Microsoft.AspNetCore.Components.Authorization
@using FormulariosData.Components.Pages

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@implements IDisposable
@inject IJSRuntime JSRuntime

<div class="sidebar @NavMenuCssClass" @onclick="CollapseNavMenu">
    <div class="navbar-header">
        <a class="navbar-brand" href="">
            <i class="bi bi-activity"></i>
        </a>
        <button title="Navigation menu" class="navbar-toggler d-md-none" @onclick="ToggleNavMenu" @onclick:stopPropagation="true">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>

        <nav class="nav-scrollable">
            <div class="custom-navbar-nav">
                <AuthorizeView>
                    <Authorized>
                        <div class="custom-nav-item">
                            <NavLink class="custom-nav-link" href="/" Match="NavLinkMatch.All" @onclick:stopPropagation="true">
                                <i class="bi bi-house-door-fill"></i>
                                <span class="nav-text">Início</span>
                            </NavLink>
                        </div>
                        
                        <div class="nav-separator"></div>

                        <div class="custom-nav-item">
                            <NavLink class="custom-nav-link" href="/recebimentos" @onclick:stopPropagation="true">
                                <i class="bi bi-box2-fill"></i>
                                <span class="nav-text">Recebimentos</span>
                            </NavLink>
                        </div>

                        <div class="nav-separator"></div>

                        <!-- Área do usuário -->
                        <div class="user-section">
                            <div class="user-info">
                                <div class="user-avatar">
                                    <span class="user-initials">@GetUserInitials()</span>
                                </div>
                                <div class="user-details">
                                    <span class="user-name">@_userName</span>
                                    <span class="user-email">@_userEmail</span>
                                </div>
                            </div>
                        </div>
                    </Authorized>
                    <NotAuthorized>
                        <div class="custom-nav-item px-3">
                            <NavLink class="custom-nav-link" href="/login" @onclick:stopPropagation="true">
                                <i class="bi bi-box-arrow-in-right"></i>
                                <span class="nav-text">Entrar</span>
                            </NavLink>
                        </div>
                    </NotAuthorized>
                </AuthorizeView>
            </div>
        </nav>
    </div>

@code {
    private bool _isAuthenticated = false;
    private string _userName = "";
    private string _userEmail = "";

    protected override async Task OnInitializedAsync()
    {
        await UpdateUserInfo();
        AuthenticationStateProvider.AuthenticationStateChanged += OnAuthenticationStateChanged;
    }

    private async void OnAuthenticationStateChanged(Task<AuthenticationState> task)
    {
        await UpdateUserInfo();
        await InvokeAsync(StateHasChanged);
    }

    private async Task UpdateUserInfo()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            _isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;

            if (_isAuthenticated)
            {
                _userName = authState.User.FindFirst("name")?.Value ??
                           authState.User.FindFirst("given_name")?.Value ??
                           authState.User.Identity?.Name ??
                           "Usuário";

                _userEmail = authState.User.FindFirst("email")?.Value ?? "";
            }
            else
            {
                _userName = "";
                _userEmail = "";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao atualizar informações do usuário: {ex.Message}");
        }
    }

    private string GetUserInitials()
    {
        if (string.IsNullOrEmpty(_userName))
            return "U";

        var parts = _userName.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        if (parts.Length >= 2)
        {
            return $"{parts[0][0]}{parts[1][0]}".ToUpper();
        }
        return _userName.Substring(0, Math.Min(2, _userName.Length)).ToUpper();
    }

    public void Dispose()
    {
        AuthenticationStateProvider.AuthenticationStateChanged -= OnAuthenticationStateChanged;
    }

    private bool collapseNavMenu = true;
    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
    private void CollapseNavMenu()
    {
        collapseNavMenu = true;
    }

    private string GetDisplayName(string? email)
    {
        if (string.IsNullOrEmpty(email))
            return "Usuário";

        if (email.Contains("@"))
        {
            var name = email.Split('@')[0];
            var parts = name.Split('.');

            if (parts.Length >= 2)
            {
                // Coloca a primeira letra de cada parte em maiúscula
                var firstName = char.ToUpper(parts[0][0]) + parts[0].Substring(1);
                var lastName = char.ToUpper(parts[1][0]) + parts[1].Substring(1);
                return $"{firstName} {lastName}";
            }

            return char.ToUpper(name[0]) + name.Substring(1);
        }

        return email;
    }

    private async Task Logout()
    {
        try
        {
            // Chama o endpoint de logout via JavaScript para garantir que funcione
            await JSRuntime.InvokeVoidAsync("window.location.href", "/logout");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro durante logout: {ex.Message}");
            // Fallback: redireciona diretamente
            Navigation.NavigateTo("/logout", true);
        }
    }
}