@page "/recebimentos"
@rendermode InteractiveServer
@attribute [Authorize]

@using FormulariosData.Models
@using FormulariosData.Data
@using Microsoft.EntityFrameworkCore
@using System.Linq.Dynamic.Core
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory

<PageTitle>Tabela de Recebimentos (MudBlazor)</PageTitle>

<AuthorizeView>
    <Authorized>
        <h1>Tabela de Recebimentos</h1>

        <div class="table-wrapper">
            <MudDataGrid T="Recebimento" ServerData="@LoadData" 
                    Striped="true" 
                    Hover="true" 
                    Dense="true" 
                    Filterable="true" 
                    FilterMode="DataGridFilterMode.ColumnFilterRow"
                    ColumnResizeMode="ResizeMode.Column" ExpandSingleRow="_expandSingleRow">
                <Columns>
                    <HierarchyColumn T="Recebimento" />
                    <PropertyColumn Property="x => x.IdRecebimento" Title="ID" Sortable="false" Filterable="false" />
                    <PropertyColumn Property="x => x.Registro" Title="Registo" Format="dd/MM/yyyy HH:mm" />
                    <PropertyColumn Property="x => x.NomeRecebedor" Title="Recebedor" />
                    <PropertyColumn Property="x => x.EmailRecebedor" Title="E-mail" />
                    <PropertyColumn Property="x => x.NomeFornecedor" Title="Fornecedor" />
                    <PropertyColumn Property="x => x.DataRecebimento" Title="Data Receb." Format="d" />
                    <PropertyColumn Property="x => x.HoraRecebimento" Title="Hora" Format="t" />
                </Columns>
                <PagerContent>
                    <MudDataGridPager T="Recebimento" />
                </PagerContent>
                <ChildRowContent Context="gridContext">
                    <MudCard Elevation="0" Class="pa-4" Style="background-color: #f0fdf4;">
                        <MudCardContent>
                            <MudText Typo="Typo.h6">Detalhes Adicionais</MudText>
                            <MudGrid Class="mt-2">
                                <MudItem xs="12">
                                    <strong>Observações:</strong> @gridContext.Item.Observacoes
                                </MudItem>
                                <MudItem xs="6">
                                    <strong>Nota Fiscal:</strong> @gridContext.Item.NumeroNotaFiscal
                                </MudItem>
                                <MudItem xs="6">
                                    <strong>Chave PIX:</strong> @gridContext.Item.TitularChavePix
                                </MudItem>
                                <MudItem xs="6">
                                    <strong>Chave PIX:</strong> @gridContext.Item.ChavePix
                                </MudItem>
                                <MudItem xs="6">
                                    <strong>Foto NF:</strong> @gridContext.Item.CaminhoFotoNotaFiscal
                                </MudItem>
                                <MudItem xs="6">
                                    <strong>Documentos:</strong> @gridContext.Item.CaminhoFotoDocumentos
                                </MudItem>
                            </MudGrid>
                        </MudCardContent>
                    </MudCard>
                </ChildRowContent>
            </MudDataGrid>
        </div>

    </Authorized>
    <NotAuthorized>
        <MudAlert Severity="Severity.Warning">Você precisa de fazer login para ver esta página.</MudAlert>
    </NotAuthorized>
</AuthorizeView>
@code {
    private bool _expandSingleRow = false;

    private async Task<GridData<Recebimento>> LoadData(GridState<Recebimento> state)
    {
        try
        {
            await using var dbContext = await DbContextFactory.CreateDbContextAsync();
            IQueryable<Recebimento> query = dbContext.Recebimentos.AsQueryable();

            // Lógica de Filtragem
            foreach (var filter in state.FilterDefinitions)
            {
                if (filter.Value == null) continue;
                var filterValue = filter.Value.ToString();
                switch (filter.Column.PropertyName)
                {
                    case nameof(Recebimento.NomeFornecedor):
                        query = query.Where(r => r.NomeFornecedor.Contains(filterValue));
                        break;
                    case nameof(Recebimento.NomeRecebedor):
                        query = query.Where(r => r.NomeRecebedor.Contains(filterValue));
                        break;
                }
            }

            // Lógica de Ordenação
            if (state.SortDefinitions.Any())
            {
                var sort = state.SortDefinitions.First();
                query = query.OrderBy($"{sort.SortBy} {(sort.Descending ? "descending" : "ascending")}");
            }
            else
            {
                query = query.OrderByDescending(r => r.Registro);
            }

            var totalItems = await query.CountAsync();
            var items = await query.Skip(state.Page * state.PageSize).Take(state.PageSize).ToListAsync();

            return new GridData<Recebimento>() { TotalItems = totalItems, Items = items };
        }
        catch (Exception ex)
        {
            Console.WriteLine($"ERRO AO CARREGAR DADOS: {ex}");
            // Retorna dados vazios em caso de erro para não quebrar a aplicação.
            return new GridData<Recebimento>() { TotalItems = 0, Items = Enumerable.Empty<Recebimento>() };
        }
    }
}
